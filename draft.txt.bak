import g_unit_aggr
import numpy as np
#a = np.array([[100,100,100],[0,0,0],[50,50,50]])
a = np.random.rand(10,10)
import time
start = time.time()
g_unit_aggr.g_unit_aggr(a)
end = time.time()
print(end-start)
exit()


import g_unit_aggr
import numpy as np
import time
a = np.random.rand(20,20)
start = time.time()
g_unit_aggr.g_unit_aggr2(a)
end = time.time()
print(end-start)
start = time.time()
g_unit_aggr.g_unit_aggr(a)
end = time.time()
print(end-start)
1



start = time.time()
g_unit_aggr.g_unit_aggr(a, arg_resolution=20)
end = time.time()
print(end-start)



FACTOR_STD = 3.5
arg_resolution = 100
stdDistri = g_unit_aggr.standard_norm_dist(FACTOR_STD, arg_resolution)
b = g_unit_aggr.range_values(11, FACTOR_STD, arg_resolution)
c = g_unit_aggr.range_values(10, FACTOR_STD, arg_resolution)
d = g_unit_aggr.area2distri(b,c,stdDistri)



import g_unit_aggr
import g_oxy
import numpy as np
a = np.array([[1,1,1],[1,1,1],[0.2,0.3,0.5]])
import time
a = np.random.rand(5,5)
aOld = g_unit_aggr.g_unit_aggr2(a)
aNew = np.array(g_oxy.g_unit(a,1.4))
print(aOld);
print(aNew)
a

a = np.random.rand(500,500)
start = time.time()
np.array(g_oxy.g_unit(a,1.4))
end = time.time()
print(end-start)

import time
a = np.random.rand(500,500)
start = time.time()
g_oxy.g_unit(a,3.5)
end = time.time()
print(end-start)


core::slice::iter::Chunks<alloc::vec::Vec<f32>>

[0.24537743, 0.31192764, 0.37847784, 0.44502805, 0.51157826, 0.57812847, 0.64467867, 0.71122888, 0.77777909, 0.8443293]
range_values(0.544853363, 3.5, 10):
    return np.linspace(x-FACTOR_STD,
        x+FACTOR_STD,
        arg_resolution)
		
		
		
		
		use pyo3::prelude::*;
mod g_unit_aggr;

/// Formats the sum of two numbers as string.
#[pyfunction]
fn g_unit(data: Vec<Vec<f32>>, width_distri: f32) -> PyResult<Vec<Vec<f32>>> {
    Ok(g_unit_aggr::g_unit_aggr(data, width_distri))
}

/// A Python module implemented in Rust.
#[pymodule]
fn g_oxy(_py: Python, m: &PyModule) -> PyResult<()> {
    m.add_function(wrap_pyfunction!(g_unit, m)?)?;
    Ok(())
}